#!/bin/bash

# Clean up Flynn Cluster

usage() {
  echo "Usage: $(basename $0) [-igc] cluster_domain/cip_id" >&2
  exit 2
}

while getopts "chig" opt; do
  case "$opt" in
    h)
      usage
      ;;
    g)
      group_cleanup=1
      ;;
    i)
      image_cleanup=1
      ;;
    c)
      cloudip_cleanup=1
  esac
done

shift $((OPTIND-1))

[[ "$1" = "--" ]] && shift

[[ $# -eq 1 ]] || usage

source $(dirname $0)/build-common

cloudip_id=$(echo $1 | grep -o 'cip-[[:alnum:]]\{5\}')
if [[ -z "${cloudip_id}" ]]; then
  echo "Unable to detect cloud ip id in $1" >&2
  exit 2
fi

echo "Cleaning up load balancer and servers"
lba_details=$(brightbox -s lbs 2>/dev/null | grep -F ${cloudip_id})
lba_id=$(echo ${lba_details} | cut -f1 -d ' ')
if [ -z "${lba_id}" ]; then
  echo "CIP is not mapped to a load balancer - aborting" >&2
  exit 2
fi
server_list=( $(echo ${lba_details} | cut -f5 -d ' ' | sed 's/,/ /g') )

object_list=( ${lba_id} "${server_list[@]}" )

if [[ "${group_cleanup}" ]]; then
  echo "Group option chosen. Cleaning up groups"
  group_list=( $(brightbox -s server show ${server_list} 2>/dev/null | sed -n '/server_groups\?\t/ {
   s///
   s/,//g
   p
   }') )
  object_list=( "${object_list[@]}" "${group_list[@]}" )
  for ((i=0; i<${#group_list[*]}; i++)); do
    firewall_policy=$(brightbox -s group show ${group_list[i]} 2>/dev/null | sed -n '/firewall_policy\t/s///p')
    if [[ "${firewall_policy}" ]]; then
      object_list=( "${object_list[@]}" ${firewall_policy} ) 
    fi
  done
fi

if [[ "${image_cleanup}" ]]; then
  echo "Image option chosen. Cleaning up images"
  object_list=( "${object_list[@]}" $(brightbox -s server show ${server_list} 2>/dev/null | sed -n '/image\t/s///p') )
fi
  
echo "Cloud IP is ${cloudip_id}"
for ((i=0; i<${#object_list[*]}; i++)); do

  case "${object_list[i]}" in
    lba*)
      sub_command=lbs
      ;;
    srv*)
      sub_command=server
      ;;
    grp*)
      sub_command=group
      ;;
    fwp*)
      sub_command=firewall-policies
      ;;
    img*)
      sub_command=images
      ;;
  esac
  if brightbox -s ${sub_command} show ${object_list[i]} 2> /dev/null |
    grep -q 'name.*Flynn'; then
    while brightbox "${sub_command}" destroy "${object_list[i]}" 2>&1 |
      grep -q '^ERROR:'; do
      echo "${sub_command} destroy command failed - waiting 20 secs"
      sleep 20
      echo "Retry"
    done
    echo "Destroyed ${object_list[i]}"
  else
    echo "Skipping non-Flynn object ${object_list[i]}"
  fi
done

[[ "${cloudip_cleanup}" ]] && brightbox cloudip destroy "${cloudip_id}"
exit 0
